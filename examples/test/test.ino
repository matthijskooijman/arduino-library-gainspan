#include <GS.h>
#include <ctype.h>
extern "C" {
#include <API/GS_API.h>
#include <AT/AtCmdLib.h>
}

// Geotrust Global CA (used by google.com)
unsigned char cert[] = {0x30, 0x82, 0x03, 0x54, 0x30, 0x82, 0x02, 0x3c, 0xa0, 0x03, 0x02, 0x01, 0x02, 0x02, 0x03, 0x02, 0x34, 0x56, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x30, 0x42, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0d, 0x47, 0x65, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x1b, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x12, 0x47, 0x65, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x43, 0x41, 0x30, 0x1e, 0x17, 0x0d, 0x30, 0x32, 0x30, 0x35, 0x32, 0x31, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x17, 0x0d, 0x32, 0x32, 0x30, 0x35, 0x32, 0x31, 0x30, 0x34, 0x30, 0x30, 0x30, 0x30, 0x5a, 0x30, 0x42, 0x31, 0x0b, 0x30, 0x09, 0x06, 0x03, 0x55, 0x04, 0x06, 0x13, 0x02, 0x55, 0x53, 0x31, 0x16, 0x30, 0x14, 0x06, 0x03, 0x55, 0x04, 0x0a, 0x13, 0x0d, 0x47, 0x65, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x49, 0x6e, 0x63, 0x2e, 0x31, 0x1b, 0x30, 0x19, 0x06, 0x03, 0x55, 0x04, 0x03, 0x13, 0x12, 0x47, 0x65, 0x6f, 0x54, 0x72, 0x75, 0x73, 0x74, 0x20, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x20, 0x43, 0x41, 0x30, 0x82, 0x01, 0x22, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x01, 0x05, 0x00, 0x03, 0x82, 0x01, 0x0f, 0x00, 0x30, 0x82, 0x01, 0x0a, 0x02, 0x82, 0x01, 0x01, 0x00, 0xda, 0xcc, 0x18, 0x63, 0x30, 0xfd, 0xf4, 0x17, 0x23, 0x1a, 0x56, 0x7e, 0x5b, 0xdf, 0x3c, 0x6c, 0x38, 0xe4, 0x71, 0xb7, 0x78, 0x91, 0xd4, 0xbc, 0xa1, 0xd8, 0x4c, 0xf8, 0xa8, 0x43, 0xb6, 0x03, 0xe9, 0x4d, 0x21, 0x07, 0x08, 0x88, 0xda, 0x58, 0x2f, 0x66, 0x39, 0x29, 0xbd, 0x05, 0x78, 0x8b, 0x9d, 0x38, 0xe8, 0x05, 0xb7, 0x6a, 0x7e, 0x71, 0xa4, 0xe6, 0xc4, 0x60, 0xa6, 0xb0, 0xef, 0x80, 0xe4, 0x89, 0x28, 0x0f, 0x9e, 0x25, 0xd6, 0xed, 0x83, 0xf3, 0xad, 0xa6, 0x91, 0xc7, 0x98, 0xc9, 0x42, 0x18, 0x35, 0x14, 0x9d, 0xad, 0x98, 0x46, 0x92, 0x2e, 0x4f, 0xca, 0xf1, 0x87, 0x43, 0xc1, 0x16, 0x95, 0x57, 0x2d, 0x50, 0xef, 0x89, 0x2d, 0x80, 0x7a, 0x57, 0xad, 0xf2, 0xee, 0x5f, 0x6b, 0xd2, 0x00, 0x8d, 0xb9, 0x14, 0xf8, 0x14, 0x15, 0x35, 0xd9, 0xc0, 0x46, 0xa3, 0x7b, 0x72, 0xc8, 0x91, 0xbf, 0xc9, 0x55, 0x2b, 0xcd, 0xd0, 0x97, 0x3e, 0x9c, 0x26, 0x64, 0xcc, 0xdf, 0xce, 0x83, 0x19, 0x71, 0xca, 0x4e, 0xe6, 0xd4, 0xd5, 0x7b, 0xa9, 0x19, 0xcd, 0x55, 0xde, 0xc8, 0xec, 0xd2, 0x5e, 0x38, 0x53, 0xe5, 0x5c, 0x4f, 0x8c, 0x2d, 0xfe, 0x50, 0x23, 0x36, 0xfc, 0x66, 0xe6, 0xcb, 0x8e, 0xa4, 0x39, 0x19, 0x00, 0xb7, 0x95, 0x02, 0x39, 0x91, 0x0b, 0x0e, 0xfe, 0x38, 0x2e, 0xd1, 0x1d, 0x05, 0x9a, 0xf6, 0x4d, 0x3e, 0x6f, 0x0f, 0x07, 0x1d, 0xaf, 0x2c, 0x1e, 0x8f, 0x60, 0x39, 0xe2, 0xfa, 0x36, 0x53, 0x13, 0x39, 0xd4, 0x5e, 0x26, 0x2b, 0xdb, 0x3d, 0xa8, 0x14, 0xbd, 0x32, 0xeb, 0x18, 0x03, 0x28, 0x52, 0x04, 0x71, 0xe5, 0xab, 0x33, 0x3d, 0xe1, 0x38, 0xbb, 0x07, 0x36, 0x84, 0x62, 0x9c, 0x79, 0xea, 0x16, 0x30, 0xf4, 0x5f, 0xc0, 0x2b, 0xe8, 0x71, 0x6b, 0xe4, 0xf9, 0x02, 0x03, 0x01, 0x00, 0x01, 0xa3, 0x53, 0x30, 0x51, 0x30, 0x0f, 0x06, 0x03, 0x55, 0x1d, 0x13, 0x01, 0x01, 0xff, 0x04, 0x05, 0x30, 0x03, 0x01, 0x01, 0xff, 0x30, 0x1d, 0x06, 0x03, 0x55, 0x1d, 0x0e, 0x04, 0x16, 0x04, 0x14, 0xc0, 0x7a, 0x98, 0x68, 0x8d, 0x89, 0xfb, 0xab, 0x05, 0x64, 0x0c, 0x11, 0x7d, 0xaa, 0x7d, 0x65, 0xb8, 0xca, 0xcc, 0x4e, 0x30, 0x1f, 0x06, 0x03, 0x55, 0x1d, 0x23, 0x04, 0x18, 0x30, 0x16, 0x80, 0x14, 0xc0, 0x7a, 0x98, 0x68, 0x8d, 0x89, 0xfb, 0xab, 0x05, 0x64, 0x0c, 0x11, 0x7d, 0xaa, 0x7d, 0x65, 0xb8, 0xca, 0xcc, 0x4e, 0x30, 0x0d, 0x06, 0x09, 0x2a, 0x86, 0x48, 0x86, 0xf7, 0x0d, 0x01, 0x01, 0x05, 0x05, 0x00, 0x03, 0x82, 0x01, 0x01, 0x00, 0x35, 0xe3, 0x29, 0x6a, 0xe5, 0x2f, 0x5d, 0x54, 0x8e, 0x29, 0x50, 0x94, 0x9f, 0x99, 0x1a, 0x14, 0xe4, 0x8f, 0x78, 0x2a, 0x62, 0x94, 0xa2, 0x27, 0x67, 0x9e, 0xd0, 0xcf, 0x1a, 0x5e, 0x47, 0xe9, 0xc1, 0xb2, 0xa4, 0xcf, 0xdd, 0x41, 0x1a, 0x05, 0x4e, 0x9b, 0x4b, 0xee, 0x4a, 0x6f, 0x55, 0x52, 0xb3, 0x24, 0xa1, 0x37, 0x0a, 0xeb, 0x64, 0x76, 0x2a, 0x2e, 0x2c, 0xf3, 0xfd, 0x3b, 0x75, 0x90, 0xbf, 0xfa, 0x71, 0xd8, 0xc7, 0x3d, 0x37, 0xd2, 0xb5, 0x05, 0x95, 0x62, 0xb9, 0xa6, 0xde, 0x89, 0x3d, 0x36, 0x7b, 0x38, 0x77, 0x48, 0x97, 0xac, 0xa6, 0x20, 0x8f, 0x2e, 0xa6, 0xc9, 0x0c, 0xc2, 0xb2, 0x99, 0x45, 0x00, 0xc7, 0xce, 0x11, 0x51, 0x22, 0x22, 0xe0, 0xa5, 0xea, 0xb6, 0x15, 0x48, 0x09, 0x64, 0xea, 0x5e, 0x4f, 0x74, 0xf7, 0x05, 0x3e, 0xc7, 0x8a, 0x52, 0x0c, 0xdb, 0x15, 0xb4, 0xbd, 0x6d, 0x9b, 0xe5, 0xc6, 0xb1, 0x54, 0x68, 0xa9, 0xe3, 0x69, 0x90, 0xb6, 0x9a, 0xa5, 0x0f, 0xb8, 0xb9, 0x3f, 0x20, 0x7d, 0xae, 0x4a, 0xb5, 0xb8, 0x9c, 0xe4, 0x1d, 0xb6, 0xab, 0xe6, 0x94, 0xa5, 0xc1, 0xc7, 0x83, 0xad, 0xdb, 0xf5, 0x27, 0x87, 0x0e, 0x04, 0x6c, 0xd5, 0xff, 0xdd, 0xa0, 0x5d, 0xed, 0x87, 0x52, 0xb7, 0x2b, 0x15, 0x02, 0xae, 0x39, 0xa6, 0x6a, 0x74, 0xe9, 0xda, 0xc4, 0xe7, 0xbc, 0x4d, 0x34, 0x1e, 0xa9, 0x5c, 0x4d, 0x33, 0x5f, 0x92, 0x09, 0x2f, 0x88, 0x66, 0x5d, 0x77, 0x97, 0xc7, 0x1d, 0x76, 0x13, 0xa9, 0xd5, 0xe5, 0xf1, 0x16, 0x09, 0x11, 0x35, 0xd5, 0xac, 0xdb, 0x24, 0x71, 0x70, 0x2c, 0x98, 0x56, 0x0b, 0xd9, 0x17, 0xb4, 0xd1, 0xe3, 0x51, 0x2b, 0x5e, 0x75, 0xe8, 0xd5, 0xd0, 0xdc, 0x4f, 0x34, 0xed, 0xc2, 0x05, 0x66, 0x80, 0xa1, 0xcb, 0xe6, 0x33};

void setup() {
	pinMode(VCC_ENABLE, OUTPUT);
	digitalWrite(VCC_ENABLE, HIGH);
	pinMode(LED_RED, OUTPUT);
	pinMode(LED_GREEN, OUTPUT);
	pinMode(LED_BLUE, OUTPUT);
	digitalWrite(LED_RED, HIGH);
	digitalWrite(LED_GREEN, HIGH);
	digitalWrite(LED_BLUE, HIGH);
	Serial.begin(115200);
	GS_API_Printf("Gainspan Demo 1.0");
	delay(1000);
	GS_API_Init();
	GS_API_PrintModuleInformation();
	GS_API_PrintNetworkInfo();
	while(!GS_API_JoinNetwork())
		GS_API_Printf("Join failed");
	GS_API_Printf("Join success");
	uint8_t ipAddr[GS_API_IP_STR_LENGTH];
	if(GS_API_GetIPAddress(ipAddr)){
		GS_API_Printf("IP: %s", ipAddr);
	}
	AtLibGs_AddCert("geotrust", /* to_flash */ false, cert, sizeof(cert));
	//AtLibGs_SetSoftwareFlowControl(1);
}

static void recv(uint8_t cid, uint8_t c) {
// Don't print here, the debugging code in the GS lib already prints
return;
  static int ignore = -1;
  // Make sure that every \r, \n or \r\n results in printing exactly
  // \r\n, but don't introduce extra linebreaks because of this.
  if (c == ignore) {
    // skip
    ignore = -1;
  } else if (c == '\r') {
    Serial.print("\r\n");
    ignore = '\n';
  } else if (c == '\n') {
    Serial.print("\r\n");
  } else if (isprint(c)) {
    Serial.write(c);
  } else {
    Serial.print('\\');
    Serial.print(c >> 4, HEX);
    Serial.print(c & 0xf, HEX);
  }
  delay(1);
}

void loop() {
	//uint8_t cid = GS_API_CreateTcpClientConnection((char*)"192.168.1.176", (char*)"80", recv);
	uint8_t cid = GS_API_CreateTcpClientConnection((char*)"74.125.136.138", (char*)"443", recv);
	//const uint8_t data[] = "GET / HTTP/1.0\r\n\r\n\xfb\xda ABCD";
	//const uint8_t data[] = {0,0x13, 1,0x13, 2,0x13, 3,0x13, 4,0x13, 5,0x13, 6,0x13, 7,0X13, 8,0x13, 9,0x13, 10,0x13, 11,0x13, 12,0x13, 13,0x13, 14,0x13, 15,0x13, 16,0x13, 17,0x13, 18,0x13, 19,0x13, 20,0x13, 21,0x13, 22,0x13, 23,0x13, 24,0x13, 25,0x13, 26,0x13, 27,0x13, 28,0x13, 29,0x13, 30,0x13, 31,0x13, 32,0x13, 33,0x13, 34,0x13, 35,0x13, 36,0x13, 37,0x13, 38,0x13, 39,0x13, 40,0x13, 41,0x13, 42,0x13, 43,0x13, 44,0x13, 45,0x13, 46,0x13, 47,0x13, 48,0x13, 49,0x13, 50,0x13, 51,0x13, 52,0x13, 53,0x13, 54,0x13, 55,0x13, 56,0x13, 57,0x13, 58,0x13, 59,0x13, 60,0x13, 61,0x13, 62,0x13, 63,0x13, 64,0x13, 65,0x13, 66,0x13, 67,0x13, 68,0x13, 69,0x13, 70,0x13, 71,0x13, 72,0x13, 73,0x13, 74,0x13, 75,0x13, 76,0x13, 77,0x13, 78,0x13, 79,0x13, 80,0x13, 81,0x13, 82,0x13, 83,0x13, 84,0x13, 85,0x13, 86,0x13, 87,0x13, 88,0x13, 89,0x13, 90,0x13, 91,0x13, 92,0x13, 93,0x13, 94,0x13, 95,0x13, 96,0x13, 97,0x13, 98,0x13, 99,0x13, 100,0x13, 101,0x13, 102,0x13, 103,0x13, 104,0x13, 105,0x13, 106,0x13, 107,0x13, 108,0x13, 109,0x13, 110,0x13, 111,0x13, 112,0x13, 113,0x13, 114,0x13, 115,0x13, 116,0x13, 117,0x13, 118,0x13, 119,0x13, 120,0x13, 121,0x13, 122,0x13, 123,0x13, 124,0x13, 125,0x13, 126,0x13, 127,0x13, 128,0x13, 129,0x13, 130,0x13, 131,0x13, 132,0x13, 133,0x13, 134,0x13, 135,0x13, 136,0x13, 137,0x13, 138,0x13, 139,0x13, 140,0x13, 141,0x13, 142,0x13, 143,0x13, 144,0x13, 145,0x13, 146,0x13, 147,0x13, 148,0x13, 149,0x13, 150,0x13, 151,0x13, 152,0x13, 153,0x13, 154,0x13, 155,0x13, 156,0x13, 157,0x13, 158,0x13, 159,0x13, 160,0x13, 161,0x13, 162,0x13, 163,0x13, 164,0x13, 165,0x13, 166,0x13, 167,0x13, 168,0x13, 169,0x13, 170,0x13, 171,0x13, 172,0x13, 173,0x13, 174,0x13, 175,0x13, 176,0x13, 177,0x13, 178,0x13, 179,0x13, 180,0x13, 181,0x13, 182,0x13, 183,0x13, 184,0x13, 185,0x13, 186,0x13, 187,0x13, 188,0x13, 189,0x13, 190,0x13, 191,0x13, 192,0x13, 193,0x13, 194,0x13, 195,0x13, 196,0x13, 197,0x13, 198,0x13, 199,0x13, 200,0x13, 201,0x13, 202,0x13, 203,0x13, 204,0x13, 205,0x13, 206,0x13, 207,0x13, 208,0x13, 209,0x13, 210,0x13, 211,0x13, 212,0x13, 213,0x13, 214,0x13, 215,0x13, 216,0x13, 217,0x13, 218,0x13, 219,0x13, 220,0x13, 221,0x13, 222,0x13, 223,0x13, 224,0x13, 225,0x13, 226,0x13, 227,0x13, 228,0x13, 229,0x13, 230,0x13, 231,0x13, 232,0x13, 233,0x13, 234,0x13, 235,0x13, 236,0x13, 237,0x13, 238,0x13, 239,0x13, 240,0x13, 241,0x13, 242,0x13, 243,0x13, 244,0x13, 245,0x13, 246,0x13, 247,0x13, 248,0x13, 249,0x13, 250,0x13, 251,0x13, 252,0x13, 253,0x13, 254,0x13, 255,0x13};
	const uint8_t data[] = "GET / HTTP/1.0\r\n\r\n";
	AtLibGs_DoTls(cid, "geotrust", NULL, NULL);
	if (!GS_API_SendTcpData(cid, (uint8_t*)data, sizeof(data) - 1)) {
		GS_API_Printf("Send TCP Data failed");
		delay(5000);
		return;
	}
	for (int i = 0; i < 5000; ++i) {
		GS_API_CheckForData();
		delay(1);
	}
	GS_API_CloseConnection(cid);
	delay(3000);
}

/* vim: set filetype=cpp: */

